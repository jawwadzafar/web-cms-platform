version: '3.8'

services:
  # MongoDB Database (Production)
  mongodb:
    image: mongo:7.0
    container_name: system-cms-mongodb-prod
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: payload
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data_prod:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - system-cms-prod-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: system-cms-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
    networks:
      - system-cms-prod-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Payload CMS Backend (Production)
  cms-admin:
    build:
      context: ./cms-admin
      dockerfile: Dockerfile.prod
    container_name: system-cms-admin-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URI=mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD}@mongodb:27017/payload?authSource=admin
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - PAYLOAD_SECRET=${PAYLOAD_SECRET}
      - PAYLOAD_PUBLIC_SERVER_URL=${PAYLOAD_PUBLIC_SERVER_URL}
      - PORT=3100
      - CORS_ORIGINS=${CORS_ORIGINS}
      - CSRF_ORIGINS=${CSRF_ORIGINS}
    ports:
      - "3100:3100"
    volumes:
      - cms_uploads_prod:/app/uploads
      - cms_media_prod:/app/public/media
    depends_on:
      - mongodb
      - redis
    networks:
      - system-cms-prod-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3100/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Frontend (Production)
  nextjs-frontend:
    build:
      context: ./nextjs-frontend
      dockerfile: Dockerfile.prod
    container_name: system-cms-frontend-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_SITE_URL=${NEXT_PUBLIC_SITE_URL}
      - NEXT_PUBLIC_SITE_NAME=${NEXT_PUBLIC_SITE_NAME}
      - NEXT_PUBLIC_SITE_DESCRIPTION=${NEXT_PUBLIC_SITE_DESCRIPTION}
    ports:
      - "3000:3000"
    depends_on:
      - cms-admin
    networks:
      - system-cms-prod-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Production)
  nginx:
    build:
      context: .
      dockerfile: nginx.dockerfile
    container_name: system-cms-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - cms_uploads_prod:/var/www/uploads:ro
      - cms_media_prod:/var/www/media:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - cms-admin
      - nextjs-frontend
    networks:
      - system-cms-prod-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Backup Service
  backup:
    image: alpine:latest
    container_name: system-cms-backup
    restart: "no"
    volumes:
      - ./backup:/backup
      - mongodb_data_prod:/data/mongodb:ro
      - cms_uploads_prod:/data/uploads:ro
    environment:
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-7}
    command: |
      sh -c "
        apk add --no-cache mongodb-tools tar gzip;
        mkdir -p /backup/$$(date +%Y%m%d);
        mongodump --host mongodb --username $$MONGO_ROOT_USERNAME --password $$MONGO_ROOT_PASSWORD --out /backup/$$(date +%Y%m%d)/mongodb;
        tar -czf /backup/$$(date +%Y%m%d)/uploads.tar.gz -C /data/uploads .;
        find /backup -type d -mtime +$$BACKUP_RETENTION_DAYS -exec rm -rf {} +;
      "
    depends_on:
      - mongodb
    networks:
      - system-cms-prod-network

  # Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: system-cms-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - system-cms-prod-network

  grafana:
    image: grafana/grafana:latest
    container_name: system-cms-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - system-cms-prod-network

volumes:
  mongodb_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  cms_uploads_prod:
    driver: local
  cms_media_prod:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  system-cms-prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16